digraph "RenderPass"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{RenderPass\n||+ virtual void create\l_shader_program()=0\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{LightingPass\n|- glm::vec3 current_offset\l- std::shared_ptr\< Lighting\lPassShaderProgram \> shader\l_program\l- Quad quad\l|+  LightingPass()\l+ void execute(glm::mat4\l projection_matrix, std\l::shared_ptr\< Camera \>,\l std::shared_ptr\< Scene \>\l scene, std::shared_ptr\< GBuffer\l \> gbuffer, float delta_time)\l+ void create_shader\l_program()\l+  ~LightingPass()\l- void set_uniforms(glm\l::mat4 projection_matrix,\l std::shared_ptr\< Camera\l \> main_camera, std::shared\l_ptr\< Scene \> scene, std::shared\l_ptr\< GBuffer \> gbuffer, float\l delta_time)\l}",height=0.2,width=0.4,color="black",URL="$db/d91/class_lighting_pass.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{RenderPassSceneDependend\n||+  RenderPassSceneDependend()\l+ virtual void set_game\l_object_uniforms(glm\l::mat4 model, glm::mat4\l normal_model)=0\l+ virtual void create\l_shader_program()=0\l+  ~RenderPassSceneDependend()\l}",height=0.2,width=0.4,color="black",URL="$d0/d58/class_render_pass_scene_dependend.html",tooltip=" "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{DirectionalShadowMapPass\n|- std::shared_ptr\< ShaderProgram\l \> shader_program\l|+  DirectionalShadowMapPass()\l+ void execute(glm::mat4\l projection, std::shared\l_ptr\< Camera \> main_camera,\l GLuint window_width, GLuint\l window_height, std::shared\l_ptr\< Scene \> scene)\l+ void create_shader\l_program()\l+ void set_game_object\l_uniforms(glm::mat4 model,\l glm::mat4 normal_model)\l+  ~DirectionalShadowMapPass()\l}",height=0.2,width=0.4,color="black",URL="$de/d56/class_directional_shadow_map_pass.html",tooltip=" "];
  Node3 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{GeometryPass\n|- std::shared_ptr\< Geometry\lPassShaderProgram \> shader\l_program\l- SkyBox skybox\l|+  GeometryPass()\l+ void execute(glm::mat4\l projection_matrix, std\l::shared_ptr\< Camera \> main\l_camera, GLuint window_width,\l GLuint window_height, GLuint\l gbuffer_id, GLfloat delta_time,\l std::shared_ptr\< Scene \>)\l+ void create_shader\l_program()\l+ void set_game_object\l_uniforms(glm::mat4 model,\l glm::mat4 normal_model)\l+  ~GeometryPass()\l}",height=0.2,width=0.4,color="black",URL="$df/d74/class_geometry_pass.html",tooltip=" "];
  Node3 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{OmniShadowMapPass\n|- std::shared_ptr\< OmniDir\lShadowShaderProgram \>\l shader_program\l|+  OmniShadowMapPass()\l+ void execute(std::shared\l_ptr\< PointLight \> p_light,\l std::shared_ptr\< Scene \> scene)\l+ void set_game_object\l_uniforms(glm::mat4 model,\l glm::mat4 normal_model)\l+ void create_shader\l_program()\l+  ~OmniShadowMapPass()\l}",height=0.2,width=0.4,color="black",URL="$d0/d1d/class_omni_shadow_map_pass.html",tooltip=" "];
}
