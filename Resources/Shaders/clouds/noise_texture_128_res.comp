#version 460
#extension GL_ARB_shading_language_include : require

#include "/grad_noise.glsl"
#include "/worley_noise.glsl"
#include "/bindings.h"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, location = NOISE_128D_IMAGE_SLOT) uniform image3D noise;

const float resolution = float(128.f);

uniform sampler3D   cell_positions[NUM_CELL_POSITIONS];
uniform int         num_cells[NUM_CELL_POSITIONS];

void main() {
    
    // this is for creating different frequencies we want to store in our channels
    float worley_1 = worley(gl_GlobalInvocationID.xyz, num_cells[0], cell_positions[0], resolution);
    float worley_2 = worley(gl_GlobalInvocationID.xyz, num_cells[1], cell_positions[1], resolution);
    float worley_3 = worley(gl_GlobalInvocationID.xyz, num_cells[2], cell_positions[2], resolution);
    float worley_4 = worley(gl_GlobalInvocationID.xyz, num_cells[3], cell_positions[3], resolution);
    float worley_5 = worley(gl_GlobalInvocationID.xyz, num_cells[4], cell_positions[4], resolution);

    float worley_sub_data_1[3] = {worley_1, worley_2, worley_3};
    float worley_sub_data_2[3] = {worley_2, worley_3, worley_4};
    float worley_sub_data_3[3] = {worley_3, worley_4, worley_5};

	//store layered worley noise in RGB; A is for perlin worley noise
    vec4 pixel =  vec4( 1.f - fbm_worley(worley_sub_data_1, 0.85f),
                        1.f - fbm_worley(worley_sub_data_2, 0.85f),
                        1.f - fbm_worley(worley_sub_data_3, 0.85f), 
                        (1.f - fbm_worley(worley_sub_data_1, 0.85f) * 0.8f  
                        + snoise(gl_GlobalInvocationID.xyz) * 0.2f)) ; // *( 1.f - fbm_worley(worley_sub_data_1, 0.85f))

    //vec4 pixel =  vec4(vec3(1.f - worley_5),1.0f);

    ivec3 pixel_coords = ivec3(gl_GlobalInvocationID);

	// output to a specific pixel in the image vec4(gl_GlobalInvocationID.xyz,1.0f)
	imageStore(noise, pixel_coords, pixel);

}