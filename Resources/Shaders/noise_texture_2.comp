#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const int NUM_FBM = 3;
const int NUM_ADJACENT_CELLS = 26;
const float RESOLUTION = float(32.f);
const int NUM_CELL_POSITIONS = 5;
const int NUM_WORLEY_FREQUENCIES = 3; 

layout(rgba32f, location=0) uniform image3D noise;

uniform sampler3D cell_positions[NUM_CELL_POSITIONS];
uniform int num_cells[NUM_CELL_POSITIONS];

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v, out vec3 gradient)
{
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  vec4 m2 = m * m;
  vec4 m4 = m2 * m2;
  vec4 pdotx = vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3));

// Determine noise gradient
  vec4 temp = m2 * m * pdotx;
  gradient = -8.0 * (temp.x * x0 + temp.y * x1 + temp.z * x2 + temp.w * x3);
  gradient += m4.x * p0 + m4.y * p1 + m4.z * p2 + m4.w * p3;
  gradient *= 105.0;

  return 105.0 * dot(m4, pdotx);
}

const vec3 offsets[NUM_ADJACENT_CELLS+1] =
{
    // centre
    vec3(0,0,0),
    // front face
    vec3(0,0,1),
    vec3(-1,1,1),
    vec3(-1,0,1),
    vec3(-1,-1,1),
    vec3(0,1,1),
    vec3(0,-1,1),
    vec3(1,1,1),
    vec3(1,0,1),
    vec3(1,-1,1),
    // back face
    vec3(0,0,-1),
    vec3(-1,1,-1),
    vec3(-1,0,-1),
    vec3(-1,-1,-1),
    vec3(0,1,-1),
    vec3(0,-1,-1),
    vec3(1,1,-1),
    vec3(1,0,-1),
    vec3(1,-1,-1),
    // ring around centre
    vec3(-1,1,0),
    vec3(-1,0,0),
    vec3(-1,-1,0),
    vec3(0,1,0),
    vec3(0,-1,0),
    vec3(1,1,0),
    vec3(1,0,0),
    vec3(1,-1,0)
};

float remap(float value, float start1, float stop1, float start2, float stop2) {

    return  start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));

}

float worley(vec3 sample_id, int cell_index) {
    
    vec3 sample_pos = (sample_id / float(RESOLUTION)) * float(num_cells[cell_index]);

    vec3 cell_id = floor(sample_pos);

    float min_dist = 1.f;

    for (int i = 0; i < NUM_ADJACENT_CELLS+1; i++) {
        
        vec3 adjacent_id = cell_id + offsets[i];

        bool out_of_scope = adjacent_id.x == -1 || adjacent_id.y == -1 || adjacent_id.z == -1 ||
                                            adjacent_id.x == num_cells[cell_index] || adjacent_id.y == num_cells[cell_index] ||
                                            adjacent_id.z == num_cells[cell_index];

        if (out_of_scope) {
        
            vec3 wrapped_id = mod(adjacent_id + vec3(num_cells[cell_index]), vec3(num_cells[cell_index])); 
            vec3 wrapped_position = texture(cell_positions[cell_index], (wrapped_id)/ float(num_cells[cell_index])).xyz;
            
            for (int m = 0; m < NUM_ADJACENT_CELLS; m++) {
            
                //after wrapping one has to check once again for lowest difference     
                vec3 difference = sample_pos - (wrapped_position + (offsets[m] * num_cells[cell_index])); 
                min_dist = min(min_dist, dot(difference,difference)); 
            
            }


        } else {
            
            vec3 difference = sample_pos - texture(cell_positions[cell_index], adjacent_id / float(num_cells[cell_index])).xyz;
            min_dist = min(min_dist, dot(difference,difference)); 

        }

    }

    return sqrt(min_dist);
	
}

float perlinfbm(vec3 p, float freq, int octaves)
{
	vec3 grad;
    float G = exp2(-.5);
    float amp = 2.f;
    float noise = 0.f;
    for (int i = 0; i < octaves; ++i)
    {
        noise += amp * snoise(p * freq, grad);
        freq *= 2.;
        amp *= G;
    }
    
    return noise;
}

float fbm_worley(float worley_noise[NUM_WORLEY_FREQUENCIES], float H)
{    

    float gain = exp2(-H);
    float amplitude = 0.7f;
    float result = 0.0f;

    for (int i=0; i<NUM_WORLEY_FREQUENCIES; i++)
    {
        result += amplitude * worley_noise[i];
        amplitude *= gain;
    }

    return result;

}

void main() {

    float worley_1 = worley(gl_GlobalInvocationID.xyz, 0);
    float worley_2 = worley(gl_GlobalInvocationID.xyz, 1);
    float worley_3 = worley(gl_GlobalInvocationID.xyz, 2);
    float worley_4 = worley(gl_GlobalInvocationID.xyz, 3);
    float worley_5 = worley(gl_GlobalInvocationID.xyz, 4);

    float worley_sub_data_1[3] = {worley_1, worley_2, worley_3};
    float worley_sub_data_2[3] = {worley_2, worley_3, worley_4};
    float worley_sub_data_3[3] = {worley_3, worley_4, worley_5};

    //float simplex_worley_dilated = remap();
    vec3 grads;
	//store 1 - F1 fpr cloudyness
	//store layered worley noise in RGB; A is for perlin worley noise
    vec4 pixel =  vec4(1.f - fbm_worley(worley_sub_data_1, 0.85f),
                                     1.f - fbm_worley(worley_sub_data_2, 0.85f),
                                     1.f - fbm_worley(worley_sub_data_3, 0.85f), 
                                     remap(perlinfbm(gl_GlobalInvocationID.xyz, 16, 3), 0.0f,1.0f, 1.f - worley_3, 1.0f));

    // vec4 pixel =  vec4(vec3(1.f - worley(gl_GlobalInvocationID.xyz, 2)),1.0f);
    ivec3 pixel_coords = ivec3(gl_GlobalInvocationID);
	// output to a specific pixel in the image vec4(gl_GlobalInvocationID.xyz,1.0f)
	imageStore(noise, pixel_coords, pixel);

}